#!KAMAILIO
#
# Created 13/06/2013
# Author: https://github.com/vitovitolo
#
#!define WITH_REDIS
#
# sample config file for dispatcher module
# - load balancing of VoIP calls with round robin
# - no TPC listening
# - don't dispatch REGISTER and presence requests
#
# Kamailio (OpenSER) SIP Server v4.0.1
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: sr-users@lists.sip-router.org
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#


####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL2

fork=yes
children=4

/* comment the next line to enable TCP */
disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on revers DNS on IPs (default on) */
auto_aliases=no

/* add local domain aliases */
# alias="mysipserver.com"
alias="2.2.2.2"

port=5060

/* uncomment and configure the following line if you want Kamailio to
   bind on a specific interface/port/proto (default bind on all available) */
# listen=udp:127.0.0.1:5060
listen=udp:2.2.2.2:5060

sip_warning=0

#Disable user agent header
user_agent_header=""

#Disable server header in sip msg
server_signature=no

####### Modules Section ########

#set module path
mpath="/opt/kamailio/lib64/kamailio/modules/"

loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "dispatcher.so"

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_REDIS
loadmodule "ndb_redis.so"
#!endif



# ----------------- setting module-specific parameters ---------------


# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)


# ----- acc params -----
modparam("acc", "log_flag", 1)
modparam("acc", "failed_transaction_flag", 3)
modparam("acc", "log_extra",
  "src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;src_ip=$si")

# ----- tm params -----
modparam("tm", "fr_timer", 2000)
modparam("tm", "fr_inv_timer", 40000)
modparam("tm", "auto_inv_100_reason", "Trying")
modparam("tm", "remap_503_500", 0)

# ----- dispatcher params -----
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_from", "sip:ping@load-balance.com")
modparam("dispatcher", "ds_ping_interval", 30)
modparam("dispatcher", "ds_probing_threshhold", 3)
modparam("dispatcher", "ds_ping_reply_codes", "class=2;code=403;code=404;code=488;class=3")
# has table for call load distribution: 4096 calls allowed
modparam("dispatcher", "ds_hash_size",64)
modparam("dispatcher", "ds_hash_expire", 3600)


#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 1500)
modparam("pike", "remove_latency", 120)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=12;autoexpire=15;")
#!endif

#!ifdef WITH_REDIS
modparam("ndb_redis", "server", "name=redis_local;addr=2.2.2.2;port=6379;db=0")
#!endif


modparam("siputils", "options_accept", "")

####### Routing Logic ########


# main request routing logic

route {
    # per request initial checks
    route(REQINIT);

    #Log inbound calls
    route(LOGS);
    #Send 200 ok to options sip msg
    route(OPTIONS);
    # handle requests within SIP dialogs
    route(WITHINDLG);

    ### only initial requests (no To tag)

    # CANCEL processing
    if (is_method("CANCEL"))
    {
        if (t_check_trans())
            t_relay();
        exit;
    }

    t_check_trans();

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE"))
        record_route();

    # account only INVITEs
    if (is_method("INVITE"))
    {
        setflag(1); # do accounting
    }

    # handle presence related requests
    route(PRESENCE);

    # handle registrations
    route(REGISTRAR);

    if ($rU==$null)
    {
        # request with no Username in RURI
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    # dispatch destinations
    route(DISPATCH);

    route(RELAY);
}


route[LOGS] {
	if (is_method("INVITE"))
        	#xlog("L_NOTICE", "Inbound call from: [$si]  Number-A:$fU  Number-B:$tU  Call-ID: $ci \n");
        	xlog("L_NOTICE", "Inbound call from: [$si]  Number-A:$fU  Number-B:$tU\n");
}

# Send 200 OK to ping OPTIONS messages
route[OPTIONS] {
   if (uri==myself) {
	if ((method==OPTIONS) && (! uri=~"sip:.*[@]+.*")) {
		options_reply();
	}
   }
}

route[RELAY] {
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Per SIP request initial checks
route[REQINIT] {

#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself)
	{
		if($sht(ipban=>$si)!=$null)
		{
			# ip is already blocked
			xlog("L_NOTICE","REQINIT: Request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req())
		{
			xlog("L_ALERT","REQINIT: ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif

    if (!mf_process_maxfwd_header("10")) {
        xlog("L_NOTICE","REQINIT: 483: Too Many Hops");
        sl_send_reply("483","Too Many Hops");
        exit;
    }

    if(!sanity_check("1511", "7"))
    {
        xlog("L_NOTICE","REQINIT: Malformed SIP message from $si:$sp\n");
        exit;
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
    if (has_totag()) {
        # sequential request withing a dialog should
        # take the path determined by record-routing
        if (loose_route()) {
            if (is_method("BYE")) {
                setflag(1); # do accounting ...
                setflag(3); # ... even if the transaction fails
            }
            route(RELAY);
        } else {
            if (is_method("SUBSCRIBE") && uri == myself) {
                # in-dialog subscribe requests
                route(PRESENCE);
                exit;
            }
            if ( is_method("ACK") ) {
                if ( t_check_trans() ) {
                    # non loose-route, but stateful ACK;
                    # must be ACK after a 487 or e.g. 404 from upstream server
                    t_relay();
                    exit;
                } else {
                    # ACK without matching transaction ... ignore and discard.
                    exit;
                }
            }
	    xlog("L_NOTICE","WITHINDLG: 404 Not here..");
            sl_send_reply("404","Not here");
        }
        exit;
    }
}

# Handle SIP registrations
route[REGISTRAR] {
    if(!is_method("REGISTER"))
        return;
    xlog("L_NOTICE", "REGISTER: Sending: 404 No registrar");
    sl_send_reply("404", "No registrar");
    exit;
}

# Presence server route
route[PRESENCE] {
    if(!is_method("PUBLISH|SUBSCRIBE"))
        return;
    xlog("L_NOTICE", "PRESENCE: Sending: 404 Not here");
    sl_send_reply("404", "Not here");
    exit;
}

# Dispatch requests
route[DISPATCH] {
    #Add x-headers to sip messages
    route(XHEADERS);
    # round robin dispatching on gateways group '1'
    #if(!ds_select_dst("1", "4"))
    if(!ds_select_domain("1", "9"))
    {
	xlog("L_NOTICE", "DISPATCH: Sending 404 no destination..");
        send_reply("404", "No destination");
        exit;
    }
    xlog("L_NOTICE", "DISPATCH: Selected destination: $rd \n");
    t_on_failure("RTF_DISPATCH");
    return;
}

# Add x-headers with source peer info
route[XHEADERS] {
    #Increment processed calls key for monitoring purpose
    redis_cmd("redis_local", "INCR %s","TEST_PROCESSED_CALLS", "r_calls");
    #Get info from redis
    redis_cmd("redis_local", "GET %s","TEST_$si", "r_out");
    xlog("L_NOTICE", "X-HEADERS: Get from redis:  $redis(r_out=>value)   ");
    #Append X-Header for ICX IP
    append_hf("X-IP: $si\r\n");
    #Append X-Header for ICX
    append_hf("X-ICX: $(redis(r_out=>value){s.select,0,,})\r\n");
    #Append X-Header for Client Group
    append_hf("X-CLIENTGROUP: $(redis(r_out=>value){s.select,1,,})\r\n");
    return;
}

#Set prefix before Username in R-URI,  depends on Id of interconexion
route[PREFIX] {
    #Increment processed calls key for monitoring purpose
    redis_cmd("redis_local", "INCR %s","TEST2_PROCESSED_CALLS", "r_calls");
    #Get info  from redis
    redis_cmd("redis_local", "GET %s","TEST2_PREFIX_$si", "r_out");
    #Check prefix length, set '0000' if find an error.
    if ($(redis(r_out=>value){s.len})!=11) {
        xlog("L_NOTICE", "PREFIX: Prefix error, set: 00000000000. Size: $(redis(r_out=>value){s.len}) ");
	$rU = "00000000000"+$rU;
    }
    else {
    #Add prefix to Username-URI
    	xlog("L_NOTICE", "PREFIX: Prefix got : $redis(r_out=>value)");
    	$rU = $redis(r_out=>value)+$rU;
    }
    return;
}

# Sample failure route
failure_route[RTF_DISPATCH] {
    if (t_is_canceled()) {
        exit;
    }
    # next DST - only for 500 or local timeout
    if (t_check_status("500")
            or (t_branch_timeout() and !t_branch_replied()))
    {
        xlog("L_NOTICE", "FAILURE ROUTE: Dispatching failed.");
        #if(ds_next_dst())
        if(ds_next_domain())
        {
	    xlog("L_NOTICE", "FAILURE ROUTE: New destination: $rd\n");
            t_on_failure("RTF_DISPATCH");
            route(RELAY);
            exit;
        }
    }
}
